{
  "version": 3,
  "sources": ["../typescript/def.ts", "../typescript/cloud.ts", "../typescript/globals.ts", "../typescript/plugin_options/options.ts"],
  "sourcesContent": ["export const COPY_AGAIN = \"copy_again\";\r\nexport const PROGRESS_BAR_ID = \"progressBarFetch\";\r\nexport const UREN_PREV_BTN_ID = \"prefillInstrButton\";\r\nexport const UREN_NEXT_BTN_ID = \"prefillInstrButtonNext\";\r\nexport const MAIL_BTN_ID = \"mailButton\";\r\nexport const DOWNLOAD_TABLE_BTN_ID = \"downloadTableButton\";\r\nexport const COPY_TABLE_BTN_ID = \"copyTableButton\";\r\nexport const LESSEN_OVERZICHT_ID = \"lessen_overzicht\";\r\nexport const TRIM_BUTTON_ID = \"moduleButton\";\r\nexport const CHECKS_BUTTON_ID = \"checksButton\";\r\nexport const COUNT_BUTTON_ID = \"fetchAllButton\";\r\nexport const FULL_CLASS_BUTTON_ID = \"fullClassButton\";\r\nexport const TRIM_TABLE_ID = \"trimesterTable\";\r\nexport const COUNT_TABLE_ID = \"werklijst_uren\";\r\nexport const TRIM_DIV_ID = \"trimesterDiv\";\r\nexport const JSON_URL = \"https://europe-west1-ebo-tain.cloudfunctions.net/json\";\r\nexport const INFO_CONTAINER_ID =  \"dp3p_infoContainer\";\r\nexport const INFO_CACHE_ID =  \"dp3p_cacheInfo\";\r\nexport const INFO_TEMP_ID =  \"dp3_tempInfo\";\r\nexport const INFO_EXTRA_ID =  \"dp3_extraInfo\";\r\nexport const AANW_LIST =  \"aanwezighedenList\";\r\nexport const GLOBAL_SETTINGS_FILENAME =  \"global_settings.json\";\r\nexport const CACHE_DATE_SUFFIX = \"__date\";\r\nexport const POWER_QUERY_ID = \"savedPowerQuery\";\r\nexport const STORAGE_GOTO_STATE_KEY = \"gotoState\";\r\nexport const STORAGE_PAGE_SETTINGS_KEY_PREFIX = \"pageSettings_\";\r\nexport const UREN_TABLE_STATE_NAME = \"__uren__\";\r\nexport const CAN_HAVE_MENU = \"canHaveMenu\";\r\nexport const CAN_SORT = \"canSort\";\r\nexport const LESSEN_TABLE_ID = \"table_lessen_resultaat_tabel\";\r\nexport const FILTER_INFO_ID = \"filterInfo\";\r\nexport const GLOBAL_COMMAND_BUFFER_KEY = \"globalCmdBuffer\";", "import * as def from \"./def\";\r\n\r\nexport let cloud = {\r\n    json: {\r\n        fetch: fetchJson,\r\n        upload: uploadJson\r\n    }\r\n};\r\n\r\nexport async function fetchJson(fileName: string) {\r\n    return fetch(def.JSON_URL + \"?fileName=\"+fileName, {method: \"GET\"})\r\n        .then((res) => res.json());\r\n}\r\n\r\nexport async function uploadJson(fileName: string, data: any) {\r\n    let res = await fetch(def.JSON_URL + \"?fileName=\" + fileName, {\r\n        method: \"POST\",\r\n        body: JSON.stringify(data)\r\n    });\r\n    return await res.text();\r\n}", "import {Observer} from \"./pageObserver\";\r\nimport {cloud} from \"./cloud\";\r\nimport * as def from \"./def\";\r\nimport {GLOBAL_SETTINGS_FILENAME} from \"./def\";\r\nimport {emmet} from \"../libs/Emmeter/html\";\r\nimport {PageName} from \"./gotoState\";\r\nimport {PageSettings} from \"./lessen/build\";\r\n\r\ntype Options = {\r\n  showDebug: boolean;\r\n    myAcademies: string;\r\n    showNotAssignedClasses: boolean;\r\n    showTableHeaders: boolean;\r\n    markOtherAcademies: boolean;\r\n};\r\nexport const options: Options = {\r\n    showDebug: false,\r\n    myAcademies: \"\",\r\n    showNotAssignedClasses: true,\r\n    showTableHeaders: true,\r\n    markOtherAcademies: true\r\n};\r\n\r\nexport let observers = [];\r\nexport let settingsObservers: (() => void)[] = [];\r\n\r\nexport function db3(message: any) {\r\n    if (options?.showDebug) {\r\n        console.log(message);\r\n        console.log(Error().stack.split(\"\\n\")[2]);\r\n    }\r\n}\r\n\r\nexport function createValidId(id: string) {\r\n    return id\r\n        .replaceAll(\" \", \"\")\r\n        .normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")\r\n        .replace(/\\W/g,'');\r\n}\r\n\r\n\r\nexport function registerObserver(observer: Observer) {\r\n    observers.push(observer);\r\n    if(observers.length > 20) //just in case...\r\n        console.error(\"Too many observers!\");\r\n}\r\n\r\nexport function registerSettingsObserver(observer: () => void) {\r\n    settingsObservers.push(observer);\r\n    if(settingsObservers.length > 20) //just in case...\r\n        console.error(\"Too many settingsObservers!\");\r\n}\r\n\r\n// noinspection JSUnusedGlobalSymbols\r\nexport function searchText(text: string) {\r\n    let input: HTMLInputElement = document.querySelector(\"#snel_zoeken_veld_zoektermen\");\r\n    input.value = text;\r\n    let evUp = new KeyboardEvent(\"keyup\", {key: \"Enter\", keyCode: 13, bubbles: true}); //doesn't seem to be working other than with this deprecated property.\r\n    input.dispatchEvent(evUp);\r\n}\r\n\r\nexport function setButtonHighlighted(buttonId: string, show: boolean) {\r\n    if (show) {\r\n        document.getElementById(buttonId).classList.add(\"toggled\");\r\n    } else {\r\n        document.getElementById(buttonId).classList.remove(\"toggled\");\r\n    }\r\n}\r\n\r\nexport function addButton(targetElement: HTMLElement, buttonId: string, title: string, clickFunction: (ev:PointerEvent) => void, imageId: string, classList: string[], text = \"\", where: InsertPosition = \"beforebegin\") {\r\n    let button = document.getElementById(buttonId);\r\n    if (button === null) {\r\n        const button = document.createElement(\"button\");\r\n        button.classList.add(\"btn\"/*, \"btn-sm\", \"btn-outline-secondary\", \"w-100\"*/, ...classList);\r\n        button.id = buttonId;\r\n        button.style.marginTop = \"0\";\r\n        button.onclick = clickFunction;\r\n        button.title = title;\r\n        if(text) {\r\n            let span = document.createElement(\"span\");\r\n            button.appendChild(span);\r\n            span.innerText = text;\r\n        }\r\n        const buttonContent = document.createElement(\"i\");\r\n        button.appendChild(buttonContent);\r\n        if(imageId)\r\n            buttonContent.classList.add(\"fas\", imageId);\r\n        targetElement.insertAdjacentElement(where, button);\r\n    }\r\n}\r\n\r\nexport function getSchooljaarSelectElement() {\r\n    let selects = document.querySelectorAll(\"select\");\r\n    return Array.from(selects)\r\n        .filter((element) => element.id.includes(\"schooljaar\"))\r\n        .pop();\r\n}\r\n\r\nexport function getHighestSchooljaarAvailable() {\r\n    let el = getSchooljaarSelectElement();\r\n    if(!el)\r\n        return undefined;\r\n    return Array.from(el.querySelectorAll(\"option\"))\r\n        .map(option => option.value)\r\n        .sort()\r\n        .pop();\r\n}\r\n\r\n//Tries to return \"202x-202y\".\r\nexport function findSchooljaar() {\r\n    let el = getSchooljaarSelectElement();\r\n    if(el)\r\n        return el.value;\r\n    el = document.querySelector(\"div.alert-primary\");\r\n    return el.textContent.match(/schooljaar *= (\\d{4}-\\d{4})*/)[1];\r\n}\r\n\r\nexport function calculateSchooljaar() {\r\n    let now = new Date();\r\n    let year = now.getFullYear();\r\n    let month = now.getMonth();\r\n    if(month < 8) //zero-based juli !\r\n        return year-1; //schoolyear started last year.\r\n    return year;\r\n}\r\n\r\nexport function createSchoolyearString(startYear: number) {\r\n    return `${startYear}-${startYear+1}`;\r\n}\r\n\r\nexport function createShortSchoolyearString(startYear: number) {\r\n    return `${startYear%1000}-${(startYear%1000)+1}`;\r\n}\r\n\r\nexport function getUserAndSchoolName() {\r\n    let footer = document.querySelector(\"body > main > div.row > div.col-auto.mr-auto > small\");\r\n    const reInstrument = /.*Je bent aangemeld als (.*)\\s@\\s(.*)\\./;\r\n    const match = footer.textContent.match(reInstrument);\r\n    if (match?.length !== 3) {\r\n        throw new Error(`Could not process footer text \"${footer.textContent}\"`);\r\n    }\r\n    let userName = match[1];\r\n    let schoolName = match[2];\r\n    return {userName, schoolName};\r\n}\r\n\r\nexport function getSchoolIdString() {\r\n    let {schoolName} = getUserAndSchoolName();\r\n    schoolName = schoolName\r\n        .replace(\"Academie \", \"\")\r\n        .replace(\"Muziek\", \"M\")\r\n        .replace(\"Woord\", \"W\")\r\n        .toLowerCase();\r\n    return createValidId(schoolName);\r\n}\r\n\r\nexport function millisToString(duration: number) {\r\n    let seconds = Math.floor((duration / 1000) % 60);\r\n    let minutes = Math.floor((duration / (1000 * 60)) % 60);\r\n    let hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\r\n    let days = Math.floor((duration / (1000 * 60 * 60 * 24)));\r\n\r\n    if (days > 0)\r\n        return days + (days === 1 ? \" dag\" : \" dagen\");\r\n    else if (hours > 0)\r\n        return hours + \" uur\";\r\n    else if (minutes > 0)\r\n        return minutes + (minutes === 1 ? \" minuut\" : \" minuten\");\r\n    else if (seconds > 0)\r\n        return seconds + \" seconden\";\r\n    else return \"\";\r\n}\r\n\r\nexport function clamp(value: number, min: number, max: number) {\r\n    return Math.min(Math.max(value, min), max);\r\n}\r\n\r\nexport function isAlphaNumeric(str: string) {\r\n    if (str.length > 1)\r\n        return false;\r\n    let code: number;\r\n    let i: number;\r\n    let len: number;\r\n\r\n    for (i = 0, len = str.length; i < len; i++) {\r\n        code = str.charCodeAt(i);\r\n        if (!(code > 47 && code < 58) && // numeric (0-9)\r\n            !(code > 64 && code < 91) && // upper alpha (A-Z)\r\n            !(code > 96 && code < 123)) { // lower alpha (a-z)\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function rangeGenerator(start: number, stop: number, step = 1): number[] {\r\n    return Array(Math.ceil((stop - start) / step)).fill(start).map((x, y) => x + y * step);\r\n}\r\n\r\nexport function createSearchField(id: string, onSearchInput: (ev: Event) => any, value: string) {\r\n    let input = document.createElement(\"input\");\r\n    input.type = \"text\";\r\n    input.id = id;\r\n    input.classList.add(\"tableFilter\");\r\n    input.oninput = onSearchInput;\r\n    input.value = value;\r\n    input.placeholder = \"filter\";\r\n    let span = document.createElement(\"span\");\r\n    span.classList.add(\"searchButton\");\r\n    span.appendChild(input);\r\n    let { first: clearButton } = emmet.appendChild(span, `button>img[src=\"${chrome.runtime.getURL(\"images/circle-xmark-regular.svg\")}\"`);\r\n    (clearButton as HTMLElement).onclick = () => {\r\n        input.value = \"\";\r\n        input.oninput(undefined);\r\n        input.focus();\r\n    };\r\n    return span;\r\n}\r\n\r\n/**\r\n * Try to match a filter expression of type \"string1+string2\", where both strings need to be present.\r\n * @param searchText\r\n * @param rowText\r\n * @return true if all strings match\r\n */\r\nfunction match_AND_expression(searchText: string, rowText: string) {\r\n    let search_AND_list = searchText.split('+').map(txt => txt.trim());\r\n    for(let search of search_AND_list) {\r\n        let caseText = rowText;\r\n        if (search === search.toLowerCase()) { //if all lowercase, make the search case-insensitive\r\n            caseText = rowText.toLowerCase();\r\n        }\r\n        if (!caseText.includes(search))\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function filterTableRows(table: (HTMLTableElement | string), rowFilter:RowFilter) {\r\n    if(typeof table === \"string\" )\r\n        table = document.getElementById(table) as HTMLTableElement;\r\n    return Array.from(table.tBodies[0].rows)\r\n        .filter(tr => rowFilter.rowFilter(tr, rowFilter.context));\r\n}\r\n\r\nexport function filterTable(table: (HTMLTableElement | string), rowFilter:RowFilter) {\r\n    if(typeof table === \"string\" )\r\n        table = document.getElementById(table) as HTMLTableElement;\r\n    for(let tr of table.tBodies[0].rows) {\r\n        tr.style.visibility = \"collapse\";\r\n        tr.style.borderColor = \"transparent\"; //get rid of some risidual border lines\r\n    }\r\n    for (let tr of filterTableRows(table, rowFilter)) {\r\n        if(!tr.dataset.keepHidden) {\r\n            tr.style.visibility = \"visible\";\r\n            tr.style.borderColor = \"\";\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\nCreates a text filter where a comma is interpreted as OR and a plus sign as AND.\r\n */\r\nexport function createTextRowFilter(searchText: string, getRowSearchText: (tr: HTMLTableRowElement) => string): RowFilter {\r\n    let search_OR_list = searchText.split(',').map(txt => txt.trim());\r\n    let context = {\r\n        search_OR_list,\r\n        getRowSearchText\r\n    };\r\n    let rowFilter = function (tr: HTMLTableRowElement, context: any) {\r\n        for(let search of context.search_OR_list) {\r\n            let rowText = context.getRowSearchText(tr);\r\n            if (match_AND_expression(search, rowText))\r\n                return true;\r\n        }\r\n        return false;\r\n    };\r\n    return {context, rowFilter};\r\n}\r\n\r\nexport interface RowFilter {\r\n    context: any,\r\n    rowFilter: (tr: HTMLTableRowElement, context: any) => boolean\r\n}\r\n\r\nexport function combineFilters (f1: RowFilter, f2: RowFilter) {\r\n    return <RowFilter> {\r\n        context: {f1, f2},\r\n        rowFilter: function (tr: HTMLTableRowElement, _context: any): boolean {\r\n            if(!f1.rowFilter(tr, f1.context))\r\n                return false;\r\n            return f2.rowFilter(tr, f2.context);\r\n        }\r\n    }\r\n}\r\n\r\nexport function getBothToolbars() {\r\n    let navigationBars = document.querySelectorAll(\"div.datatable-navigation-toolbar\"); // as HTMLElement;\r\n    if (navigationBars.length < 2)\r\n        return undefined; //wait for top and bottom bars.\r\n    return navigationBars;\r\n}\r\n\r\nexport function addTableNavigationButton(navigationBars: NodeListOf<Element>, btnId: string, title: string, onClick: any, fontIconId: string) {\r\n    addButton(navigationBars[0].lastElementChild as HTMLElement, btnId, title, onClick, fontIconId, [\"btn-secondary\"], \"\", \"afterend\");\r\n    return true;\r\n}\r\n\r\nexport function distinct<Type>(array: Type[]): Type[] {\r\n    return [...new Set(array)];\r\n}\r\n\r\nexport async function fetchStudentsSearch(search: string) {\r\n    return fetch(\"/view.php?args=zoeken?zoek=\" + encodeURIComponent(search))\r\n        .then((response) => response.text())\r\n        .then((_text) => fetch(\"/views/zoeken/index.view.php\"))\r\n        .then((response) => response.text())\r\n        .catch(err => {\r\n            console.error('Request failed', err);\r\n            return \"\";\r\n        });\r\n}\r\n\r\nexport async function setViewFromCurrentUrl() {\r\n    let hash = window.location.hash.replace(\"#\", \"\");\r\n    await fetch(\"https://administratie.dko3.cloud/#\" + hash).then(res => res.text());\r\n    // call to changeView() - assuming this is always the same, so no parsing here.\r\n    await fetch(\"view.php?args=\" + hash).then(res => res.text());\r\n}\r\n\r\nexport interface GlobalSettings {\r\n    globalHide: boolean\r\n}\r\n\r\nexport function equals(g1: GlobalSettings, g2: GlobalSettings){\r\n    return (\r\n        g1.globalHide === g2.globalHide\r\n    );\r\n}\r\n\r\nexport async function saveGlobalSettings(globalSettings: GlobalSettings) {\r\n    return cloud.json.upload(GLOBAL_SETTINGS_FILENAME, globalSettings);\r\n}\r\n\r\nexport async function fetchGlobalSettings(defaultSettings: GlobalSettings) {\r\n    return await cloud.json.fetch(GLOBAL_SETTINGS_FILENAME)\r\n        .catch(err => {\r\n            console.log(err);\r\n            return defaultSettings;\r\n        }) as GlobalSettings;\r\n}\r\n\r\nlet globalSettings: GlobalSettings = {\r\n    globalHide: false,\r\n}\r\n\r\nexport function getGlobalSettings() {\r\n    return globalSettings;\r\n}\r\nexport function  setGlobalSetting(settings: GlobalSettings) {\r\n    globalSettings = settings;\r\n}\r\n\r\nexport let rxEmail = /\\w[\\w.\\-]*\\@\\w+\\.\\w+/gm;\r\n\r\nexport function whoAmI() {\r\n    let allScripts = document.querySelectorAll(\"script\");\r\n    let scriptTexts = [...allScripts].map(s => s.textContent).join();\r\n    let email = scriptTexts.match(rxEmail)[0];\r\n    let rxName = /name: '(.*)'/;\r\n    let name = scriptTexts.match(rxName)[1];\r\n    return {email, name};\r\n}\r\n\r\nexport function stripStudentName(name: string): string {\r\n    return name.replaceAll(/[,()'-]/g, \" \").replaceAll(\"  \", \" \");\r\n}\r\n\r\nexport enum Actions {\r\n    OpenTab = \"open_tab\",\r\n    GetTabData = \"get_tab_data\",\r\n}\r\n\r\nexport interface ExtensionRequest {\r\n    action: Actions,\r\n    data: any,\r\n    pageTitle: string\r\n}\r\n\r\nexport function openTab(html: string, pageTitle: string) {\r\n    let message: ExtensionRequest = {\r\n        action: Actions.OpenTab,\r\n        data: html,\r\n        pageTitle\r\n    };\r\n\r\n    chrome.runtime.sendMessage(message)\r\n        .then(() => console.log(\"message sent.\"));\r\n}\r\n\r\nexport function writeTableToClipboardForExcel(table: HTMLTableElement) {\r\n    let html = table.outerHTML\r\n        .replaceAll('\\n','<br style=\"mso-data-placement:same-cell;\"/>')  // new lines inside html cells => Alt+Enter in Excel\r\n        .replaceAll('<td','<td style=\"vertical-align: top;\"');  // align top\r\n    return navigator.clipboard.writeText(html);\r\n}\r\n\r\nexport function createTable(headers: Iterable<string>, cols: Iterable<Iterable<string>>) {\r\n    let tmpDiv = document.createElement(\"div\");\r\n    let {first: tmpTable, last: tmpThead} = emmet.appendChild(tmpDiv, \"table>thead\");\r\n    for (let th of headers) {\r\n        emmet.appendChild(tmpThead as HTMLElement, `th{${th}}`);\r\n    }\r\n    let tmpTbody = tmpTable.appendChild(document.createElement(\"tbody\"));\r\n    for (let tr of cols) {\r\n        let tmpTr = tmpTbody.appendChild(document.createElement(\"tr\"));\r\n        for (let cell of tr) {\r\n            emmet.appendChild(tmpTr, `td{${cell}}`);\r\n        }\r\n    }\r\n    return tmpTable as HTMLTableElement;\r\n}\r\n\r\nexport type ResultOk<T> = {\r\n    result: T\r\n}\r\n\r\nexport type ResultFail = {\r\n    error: NonNullable<string>\r\n}\r\n\r\ntype Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };\r\ntype XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;\r\n\r\nexport type Result<T> = XOR<ResultOk<T>,ResultFail>\r\n\r\nexport function isButtonHighlighted(buttonId: string) {\r\n    return document.getElementById(buttonId)?.classList.contains(\"toggled\");\r\n}\r\n\r\nexport function range(startAt: number, upTo: number) {\r\n    if (upTo > startAt)\r\n        return [...Array(upTo - startAt).keys()].map(n => n + startAt);\r\n    else\r\n        return [...Array(startAt - upTo).keys()].reverse().map(n => n + upTo + 1);\r\n}\r\n\r\nexport function getPageSettings(pageName: PageName, defaultSettings: PageSettings): PageSettings {\r\n    let storedState = localStorage.getItem(def.STORAGE_PAGE_SETTINGS_KEY_PREFIX + pageName);\r\n    if (storedState)\r\n        return JSON.parse(storedState);\r\n    return defaultSettings;\r\n}\r\n\r\nexport function savePageSettings(state: PageSettings) {\r\n    localStorage.setItem(def.STORAGE_PAGE_SETTINGS_KEY_PREFIX + state.pageName, JSON.stringify(state));\r\n}\r\n\r\nlet globalTransientPageState: Map<string, any> = new Map();\r\n\r\nexport function getPageTransientStateValue(key: string, defaultValue: any) {\r\n    let value =  globalTransientPageState.get(key);\r\n    return value ? value : setPageTransientStateValue(key, defaultValue);\r\n}\r\n\r\nexport function setPageTransientStateValue(key:string, transientState: object){\r\n    globalTransientPageState.set(key, transientState);\r\n    return transientState;\r\n}\r\nexport function clearPageTransientState() {\r\n    globalTransientPageState.clear();\r\n}\r\n\r\nexport async function getOptions() {\r\n    // xxx @ts-ignore\r\n    let items = await chrome.storage.sync.get(null); //get all\r\n    // xxx @ts-ignore\r\n    Object.assign(options, items);\r\n    setGlobalSetting(await fetchGlobalSettings(getGlobalSettings()));\r\n}", "import {fetchGlobalSettings, GlobalSettings, options, saveGlobalSettings} from \"../globals\";\r\n\r\nlet htmlOptionDefs = new Map();\r\n\r\ndefineHtmlOption(\"showDebug\", 'checked');\r\ndefineHtmlOption(\"showNotAssignedClasses\", 'checked');\r\ndefineHtmlOption(\"showTableHeaders\", 'checked');\r\ndefineHtmlOption(\"markOtherAcademies\", 'checked');\r\ndefineHtmlOption(\"myAcademies\", 'value');\r\n\r\ndocument.body.addEventListener(\"keydown\", onKeyDown);\r\n\r\nlet globalSettings: GlobalSettings = {\r\n    globalHide: false\r\n}\r\n\r\nfunction onKeyDown(ev: KeyboardEvent) {\r\n    if (ev.key === \"h\" && ev.altKey && !ev.shiftKey && !ev.ctrlKey) {\r\n        ev.preventDefault();\r\n        let answer = prompt(\"Verberg plugin bij iedereen?\");\r\n        saveHide(answer === \"hide\")\r\n            .then(() => saveOptionsFromGui());\r\n    }\r\n}\r\n\r\nasync function saveHide(hide: boolean) {\r\n    globalSettings = await fetchGlobalSettings(globalSettings);\r\n    globalSettings.globalHide = hide;\r\n    await saveGlobalSettings(globalSettings);\r\n    console.log(\"Global settings saved.\");\r\n}\r\n\r\nconst saveOptionsFromGui = () => {\r\n    let newOptions = {\r\n        touched: Date.now() // needed to trigger the storage changed event.\r\n    };\r\n    for (let option of htmlOptionDefs.values()) {\r\n        newOptions[option.id] = document.getElementById(option.id)[option.property];\r\n\r\n    }\r\n    // @ts-ignore\r\n    chrome.storage.sync.set(\r\n        newOptions, () => {\r\n            // Update status to let user know options were saved.\r\n            const status = document.getElementById('status');\r\n            status.textContent = 'Opties bewaard.';\r\n            setTimeout(() => {\r\n                status.textContent = '';\r\n            }, 750);\r\n        }\r\n    );\r\n\r\n};\r\n\r\nfunction defineHtmlOption(id: string, property: string) {\r\n    htmlOptionDefs.set(id, {id: id, property: property});\r\n}\r\n\r\nasync function restoreOptionsToGui(){\r\n    let items = await chrome.storage.sync.get(null); //get all\r\n    Object.assign(options, items);\r\n    for (const [key, value] of Object.entries(options)) {\r\n        let optionDef = htmlOptionDefs.get(key);\r\n        if(!optionDef)\r\n            continue; //no GUI for this option.\r\n        document.getElementById(optionDef.id)[optionDef.property] = value;\r\n    }\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', restoreOptionsToGui);\r\ndocument.getElementById('save').addEventListener('click', saveOptionsFromGui);"],
  "mappings": "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",
  "names": ["globalSettings"]
}
