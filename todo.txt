* Tags: half transparent if not for all 3 trims present.

* Trims: summing hours per block
  > for Lievenka: fine: just add the hours of all the blooks
  > for Rhea: NOT fine: altviool and viool share the same hour!
     > how do we indicate this?
     > what is the default? Sum or merge(max)?
       > if we make extra classes, this may be because of splitting students over hours.
     > via a tag?
     > Lievenka is the default because, naively, every instrument has it's own hour.
     > Rhea is the exception: viool and altviool SHARE the same hour.
        > a tag?
          : gedeeld_aantal=rhea_altviool_viool
          > set this on BOTH altviool and viool.
          > document these tags.

* Global search: sorteer op voornaam.

* trims search: combined search werkt niet. viool+Hannah

* afw: zoek ook op naam

* If table page size is changed: clear cache and update infobar!

* Volle klas?: add a quick check.

* Werklijst: save criteria.

Nav history
------------
* Search bar: add history.
  > Where?
  > How? What sort of UI?
  > Give each a name
    > And add it to PQ!
* PowerQuery: keep list of last visited pages. Always on top.
* Add a forward-backward button in black top bar.

Features
-----------
* use onRow() to find first row that matches given criteria.

* add table buttons to top AND bottom navigation.

* Uitleningen: verlengdatum moet 1/9 zijn of in verkeerde jaar!

* link uitlening -> asset.

* Use popover for the student.info popup.
  > make trimesters links to the classes.

* Extra filters
 - Offline
 - No teacher
 - No max

* Checks:
      >>>> only actual errors to avoid fatigue!
  > 999 for certain classes
  > no alias for Woord classes
  > no teacher?
  > ALC: should be assigned to Kristel
  > offline/online
    - ALC: offline
    - Woord with alias: offline

* Add an option to specify the les_naam format?
  : "Initiatie [instrument] trim [trim_num]" ?
  > spaces mean all possible whitespace, any number of times.
  > "..." means any character.

Werklijst
----------
* Perhaps create a dataModel class?
  > model.load(params) -> fetches from source (dko3 or cloud)
    - also converts data to indexed (Map) data.
    - params = schoolName, schoolYear,... -> determines fileName
  > model.update() or something to change the data and set a isChanged flag?
  > model.save() -> back to cloud.
  > model.cache(), refresh(),...

