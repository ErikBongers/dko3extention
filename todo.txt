* If table page size is changed: clear cache and update infobar!

* Volle klas?: add a quick check.

* Use bundler?
  > Mapping seems to work ok...

* Werklijst: save criteria.

Nav history
------------
* Search bar: add history.
  > Where?
  > How? What sort of UI?
  > Give each a name
    > And add it to PQ!
* PowerQuery: keep list of last visited pages. Always on top.
* Add a forward-backward button in black top bar.

Features
-----------
* les: sorteer lln op voornaam.

* werklijst: Show uren button: make it a button/dropdown to be able to select a previous year.

* use onRow() to find first row that matches given criteria.

* add table buttons to top AND bottom navigation.

* cache werklijst or other tables
  - table fetches data rows and auxData (fromCloud).

* cache info: show age of data:
 : 3 hours old,...

* cache: option to never cache.
  > per table?

* db3: setting to turn callstack on/off

* move defs.js out of /lessen/

* Uitleningen: verlengdatum moet 1/9 zijn of in verkeerde jaar!

* link uitlening -> asset.

* Filter full classes state is at trimDiv level AND at overzichtDiv.
  > consolidate state?
  > in some state machine, or all in the overzicht div?

* Use popover for the student.info popup.
  > make trimesters links to the classes.

* Extra filters
 - Offline
 - No teacher
 - No max

* Checks:
      >>>> only actual errors to avoid fatigue!
  > 999 for certain classes
  > no alias for Woord classes
  > no teacher?
  > ALC: should be assigned to Kristel
  > offline/online
    - ALC: offline
    - Woord with alias: offline

* Add an option to specify the les_naam format?
  : "Initiatie [instrument] trim [trim_num]" ?
  > spaces mean all possible whitespace, any number of times.
  > "..." means any character.

Werklijst
----------
* Perhaps create a dataModel class?
  > model.load(params) -> fetches from source (dko3 or cloud)
    - also converts data to indexed (Map) data.
    - params = schoolName, schoolYear,... -> determines fileName
  > model.update() or something to change the data and set a isChanged flag?
  > model.save() -> back to cloud.
  > model.cache(), refresh(),...

